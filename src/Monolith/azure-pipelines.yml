# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryEndpoint: 'classifiedads'
  dockerComposeFile: 'src/Monolith/docker-compose.yml'
  tag: '$(Build.BuildId)'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: SonarCloud
  displayName: SonarCloud
  jobs:  
  - job: SonarCloud
    displayName: SonarCloud
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'SonarCloud'
        organization: 'phongnguyend'
        scannerMode: 'MSBuild'
        projectKey: 'Practical.CleanArchitecture'
        projectName: 'Practical.CleanArchitecture'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: 'src/Monolith/ClassifiedAds.Monolith.sln'
    - task: SonarCloudAnalyze@1
    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'
- stage: WhiteSourceBolt
  displayName: Build and Run WhiteSource Bolt
  jobs:  
  - job: WhiteSourceBolt
    displayName: Build and Run WhiteSource Bolt
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: 'src/Monolith/ClassifiedAds.Monolith.sln'
    - task: WhiteSource Bolt@20
      inputs:
        cwd: 'src/Monolith/'
- stage: Build
  displayName: Build and Push Docker Images
  jobs:  
  - job: Build
    displayName: Build and Push
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DockerCompose@0
      displayName: Build services
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: $(dockerRegistryEndpoint)
        dockerComposeFile: $(dockerComposeFile)
        action: 'Build services'
        projectName: $(Build.Repository.Name)
        qualifyImageNames: true
        additionalImageTags: $(Build.BuildId)
    - task: DockerCompose@0
      displayName: Push services
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: $(dockerRegistryEndpoint)
        dockerComposeFile: $(dockerComposeFile)
        action: 'Push services'
        projectName: $(Build.Repository.Name)
        qualifyImageNames: true
        additionalImageTags: $(Build.BuildId)